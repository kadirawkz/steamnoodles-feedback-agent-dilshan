#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Sentiment Visualization Agent
- Reads Yelp restaurant reviews with 'Date' and 'Rating' columns
- Converts ratings to sentiment labels
- Plots sentiment trends over a given date range
- Interactive prompt for date range
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ---------------------------
# Load dataset
# ---------------------------
DATA_PATH = r"C:\Users\kadira\Documents\steamnoodles-feedback-agent\data set\Yelp Restaurant Reviews.csv"

def load_data(path=DATA_PATH):
    df = pd.read_csv(path)
    # Standardize column names
    df.rename(columns={col.strip(): col.strip().lower() for col in df.columns}, inplace=True)

    # Check required columns
    if 'date' not in df.columns or 'rating' not in df.columns or 'review text' not in df.columns:
        raise ValueError("CSV must have 'Date', 'Rating', and 'Review Text' columns")

    # Convert date
    df['date'] = pd.to_datetime(df['date'])

    # Convert ratings to sentiment
    def rating_to_sentiment(r):
        if r <= 2: return 'negative'
        elif r == 3: return 'neutral'
        else: return 'positive'

    df['sentiment'] = df['rating'].apply(rating_to_sentiment)
    return df

# ---------------------------
# Filter by date range
# ---------------------------
def filter_date_range(df, start_date, end_date):
    mask = (df['date'] >= start_date) & (df['date'] <= end_date)
    return df.loc[mask]

# ---------------------------
# Plot sentiment trend
# ---------------------------
def plot_sentiment_trend(df, start_date, end_date):
    df_filtered = filter_date_range(df, start_date, end_date)
    if df_filtered.empty:
        print("No reviews found in this date range.")
        return

    # Group by date and sentiment
    df_count = df_filtered.groupby(['date', 'sentiment']).size().reset_index(name='count')

    # Pivot for plotting
    df_pivot = df_count.pivot(index='date', columns='sentiment', values='count').fillna(0)

    # Plot
    sns.set_style("whitegrid")
    df_pivot.plot(kind='line', figsize=(10,6), marker='o')
    plt.title(f"Sentiment Trend from {start_date.date()} to {end_date.date()}")
    plt.xlabel("Date")
    plt.ylabel("Number of Reviews")
    plt.xticks(rotation=45)
    plt.legend(title="Sentiment")
    plt.tight_layout()
    plt.show()

# ---------------------------
# Interactive prompt
# ---------------------------
def main():
    try:
        df = load_data()
    except Exception as e:
        print(f"Error loading dataset: {e}")
        return

    print("=== Sentiment Visualization Agent ===")
    start_input = input("Enter start date (YYYY-MM-DD): ").strip()
    end_input = input("Enter end date (YYYY-MM-DD): ").strip()
    try:
        start_date = pd.to_datetime(start_input)
        end_date = pd.to_datetime(end_input)
    except ValueError:
        print("Invalid date format. Please use YYYY-MM-DD.")
        return

    plot_sentiment_trend(df, start_date, end_date)

if __name__ == "__main__":
    main()
